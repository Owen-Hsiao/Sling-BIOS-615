// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vecSum
double vecSum(NumericVector& vec);
RcppExport SEXP _Sling_vecSum(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(vecSum(vec));
    return rcpp_result_gen;
END_RCPP
}
// Sum
double Sum(NumericVector& vec);
RcppExport SEXP _Sling_Sum(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(Sum(vec));
    return rcpp_result_gen;
END_RCPP
}
// Sum2
double Sum2(NumericVector& vec);
RcppExport SEXP _Sling_Sum2(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(Sum2(vec));
    return rcpp_result_gen;
END_RCPP
}
// Sum3
double Sum3(NumericVector& vec);
RcppExport SEXP _Sling_Sum3(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(Sum3(vec));
    return rcpp_result_gen;
END_RCPP
}
// Sum4
double Sum4(NumericVector vec);
RcppExport SEXP _Sling_Sum4(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(Sum4(vec));
    return rcpp_result_gen;
END_RCPP
}
// Sum5
double Sum5(NumericVector& vec);
RcppExport SEXP _Sling_Sum5(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(Sum5(vec));
    return rcpp_result_gen;
END_RCPP
}
// Inner_Product1
double Inner_Product1(NumericVector& vec1, NumericVector& vec2);
RcppExport SEXP _Sling_Inner_Product1(SEXP vec1SEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(Inner_Product1(vec1, vec2));
    return rcpp_result_gen;
END_RCPP
}
// Inner_Product2
double Inner_Product2(NumericVector& vec1, NumericVector& vec2);
RcppExport SEXP _Sling_Inner_Product2(SEXP vec1SEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(Inner_Product2(vec1, vec2));
    return rcpp_result_gen;
END_RCPP
}
// mmult
NumericMatrix mmult(NumericMatrix& m, NumericMatrix& v);
RcppExport SEXP _Sling_mmult(SEXP mSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(mmult(m, v));
    return rcpp_result_gen;
END_RCPP
}
// mvmult
NumericMatrix mvmult(NumericMatrix& m, NumericVector& v);
RcppExport SEXP _Sling_mvmult(SEXP mSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(mvmult(m, v));
    return rcpp_result_gen;
END_RCPP
}
// standardLasso
List standardLasso(NumericMatrix& X, NumericVector& y, double l, int max_iter);
RcppExport SEXP _Sling_standardLasso(SEXP XSEXP, SEXP ySEXP, SEXP lSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(standardLasso(X, y, l, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// sling
List sling(NumericMatrix& X, NumericVector& y, double l, int max_iter);
RcppExport SEXP _Sling_sling(SEXP XSEXP, SEXP ySEXP, SEXP lSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(sling(X, y, l, max_iter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Sling_vecSum", (DL_FUNC) &_Sling_vecSum, 1},
    {"_Sling_Sum", (DL_FUNC) &_Sling_Sum, 1},
    {"_Sling_Sum2", (DL_FUNC) &_Sling_Sum2, 1},
    {"_Sling_Sum3", (DL_FUNC) &_Sling_Sum3, 1},
    {"_Sling_Sum4", (DL_FUNC) &_Sling_Sum4, 1},
    {"_Sling_Sum5", (DL_FUNC) &_Sling_Sum5, 1},
    {"_Sling_Inner_Product1", (DL_FUNC) &_Sling_Inner_Product1, 2},
    {"_Sling_Inner_Product2", (DL_FUNC) &_Sling_Inner_Product2, 2},
    {"_Sling_mmult", (DL_FUNC) &_Sling_mmult, 2},
    {"_Sling_mvmult", (DL_FUNC) &_Sling_mvmult, 2},
    {"_Sling_standardLasso", (DL_FUNC) &_Sling_standardLasso, 4},
    {"_Sling_sling", (DL_FUNC) &_Sling_sling, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_Sling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
